/* taylor Version 2.2, Feb 9, 2024 */
/* Using coef lib: MY_FLOAT */
/* No jet */
/************************************************************************
 *
 *  A sample taylor.h
 *     Here is a list of macros/functions needed to compile the auto
 *     generated taylor polynomial procedure.  
 *
 */


#ifdef __cplusplus
extern "C"
{
#endif
/***********************************************************************
 *
 * Code generated by the TAYLOR translator.
 */

#ifndef _NUMBER_OF_JET_VARS_
#define _NUMBER_OF_STATE_VARS_         6
#define _NUMBER_OF_JET_VARS_           0
#define _NUMBER_OF_MAX_SYMBOLS_        0
#define _MAX_DEGREE_OF_JET_VARS_       0
#define _JET_COEFFICIENTS_COUNT_TOTAL_ 1
#define _MAX_SIZE_OF_JET_VAR_          1
#endif

#ifndef _NUMBER_OF_CLOUD_VARS_
#define _NUMBER_OF_CLOUD_VARS_         0
#define _MAX_CLOUD_SIZE_               0
#endif

#ifndef _TAYLOR_H_
#define _TAYLOR_H_
typedef double MY_FLOAT;

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include <ctype.h>
/*
 *  MY_FLOAT is the data type to be used in computing derivatives. 
 *  It may be 'float', 'double' or user defined private data types
 *  like 'long double', 'complex' etc. 
 */
#define MY_FLOAT_IS_DOUBLE

/* for double or long double, don't need to initialize */
#define   InitMyFloat(r)            
#define   ClearMyFloat(r)           
 
/* assign b to a */
#define   AssignMyFloat(a, b)       {(a)=(b);}

/* create a MY_FLOAT from a, assigne to r. a is an integer or a float */
#define   MakeMyFloatA(r,a)         (r=(double)(a))

/* create a MY_FLOAT from string, a is an integer or a float, s is its string representation */
#define   MakeMyFloatC(r,s,a)       (r=(double)(a))

/* create a MY_FLOAT from a, assign to r and return r */
#define   MakeMyFloatB(r,a)         (r=(double)(a),r)

/* addition r=a+b   */
#define   AddMyFloatA(r,a,b)        (r=(a)+(b))
#define   AddMyFloatD               AddMyFloatA
#define   AddMyFloatSI              AddMyFloatA

/* substraction r=a-b */
#define   SubtractMyFloatA(r,a,b)   (r=(a)-(b))
#define   SubtractMyFloatD          SubtractMyFloatA
#define   SubtractMyFloatSI         SubtractMyFloatA
#define   SubtractSIMyFloat         SubtractMyFloatA
#define   SubtractDMyFloat          SubtractMyFloatA

/* multiplication r=a*b */
#define   MultiplyMyFloatA(r,a,b)   (r=(a)*(b))
#define   MultiplyMyFloatD          MultiplyMyFloatA
#define   MultiplyMyFloatSI         MultiplyMyFloatA

/* division r=a/b */
#define   DivideMyFloatA(r,a,b)     (r=(a)/(b))
#define   DivideMyFloatD(r,a,b)     (r=(a)/(double)(b))
#define   DivideMyFloatSI           DivideMyFloatD
#define   DivideDMyFloat(r,a,b)     (r=(double)(a)/(b))
#define   DivideSIMyFloat           DivideDMyFloat

/* division by an integer r=a/i */
#define   DivideMyFloatByInt(r,a,i)    (r=(a)/(double)(i))
/* negation r=-a*/
#define   NegateMyFloatA(r,a)          (r= -(a))

/* square root r=sqrt(a) */
#define   sqrtMyFloatA(r,a)            (r=sqrt(a))
/* exponentiation r=a^b */
#define   ExponentiateMyFloatA(r,a,b)  (r=pow((a),(b)))
/* exponentiation r=a^b, b is an integer */
#define   ExponentiateMyFloatIA(r,a,b) (r=pow((a),(double)(b)))
/* sin(a)  r=sin(a) */
#define   sinMyFloatA(r,a)             (r=sin((a)))
/* cos(a)  r=cos(a) */
#define   cosMyFloatA(r,a)             (r=cos((a)))
/* tan(a)  r=tan(a) */
#define   tanMyFloatA(r,a)             (r=tan((a)))
/* atan(a) r=atan(a) */
#define   atanMyFloatA(r,a)            (r=atan((a)))
/* exp(a)  r=exp(a) */
#define   expMyFloatA(r,a)             (r=exp((a)))
/* log(a)  r=log(a) */
#define   logMyFloatA(r,a)             (r=log((a)))
/* sinh(a) r=sinh(a) */
#define   sinhMyFloatA(r,a)            (r=sinh(a))
/* cosh(a) r=cosh(a) */
#define   coshMyFloatA(r,a)            (r=cosh(a))
/* tanh(a) r=tanh(a) */
#define   tanhMyFloatA(r,a)            (r=tanh(a))


/* log10(a)  r=log10(a) */
#define   log10MyFloatA(r,a)           (r=log10((a)))
/* fabs(a) r=fabs(a) */
#define   fabsMyFloatA(r,a)            (r=fabs(a))

/* convert to int */
#define   MyFloatToInt(ir,fa)          (ir=(int)(fa))
/* convert to double */
#define   MyFloatToDouble(ir,fa)       (ir=(double)(fa))
/* convert to string */
#define   MyFloatToString3(s,fmt,a)    sprintf(s,fmt,(double)(a))
#define   MyFloatToString(s,a)         MyFloatToString3(s,"% .15e",a)


/* boolean operation  */
#define   MyFloatA_GE_B(a,b)        ((a)>=(b))
#define   MyFloatA_GT_B(a,b)        ((a)> (b))
#define   MyFloatA_LE_B(a,b)        ((a)<=(b))
#define   MyFloatA_LT_B(a,b)        ((a)< (b))
#define   MyFloatA_EQ_B(a,b)        ((a)==(b))
#define   MyFloatA_NEQ_B(a,b)       ((a)!=(b))
#define   MyFloatA_CMP_B(a,b)       ((a)-(b))
#define   MyFloatA_CMPABS_B(a,b)    (fabs(a)-fabs(b))


#define   OutputMyFloat3(file,fmt,a) fprintf(file,fmt,(double)(a))
#define   OutputMyFloat(a)           OutputMyFloat3(stdout,"%g ",a)

#define   InputMyFloat3(file,fmt,a)  fscanf(file,fmt,&(a))
#define   InputMyFloat(a)            InputMyFloat3(stdin,"%lf ",a)

#define   StringToMyFloat4(s,fmt,a,n) (sscanf(s,fmt,&(a),n),(s)+*(n))
#define   StringToMyFloat3(s,fmt,a)  sscanf(s,fmt,&(a))
#define   StringToMyFloat(s,a)       StringToMyFloat3(s,"%lf ",a)

/************************************************************************/

#endif

/*** MY_JET ***/
#ifndef _MY_JET_H_
#define _MY_JET_H_


typedef void* MY_JET;


#define MY_JET_FUN(x) jet_none_ ## x ## _auto
#endif /* _MY_JET_H_ */


MY_FLOAT **taylor_coefficients_auto(MY_FLOAT t, MY_FLOAT *x, int order);

MY_FLOAT **taylor_coefficients_autoA(MY_FLOAT t, MY_FLOAT *x, int order, int reuse_last_computation);

MY_FLOAT **taylor_coefficients_auto_A(MY_FLOAT t, MY_FLOAT *x, int order, int reuse_last_computation, MY_JET *jetIn, MY_JET ***jetOut);
int       taylor_step_auto(MY_FLOAT *ti, MY_FLOAT *x, int dir, int step_ctl,
                         double log10abserr, double log10relerr,
                         MY_FLOAT *endtime, MY_FLOAT *ht, int *order, MY_JET *jetInOut);

int       taylor_uniform_step_auto_tag(MY_FLOAT *ti, MY_FLOAT *x, int dir, int step_ctl,
                         double log10abserr, double log10relerr,
                         MY_FLOAT *endtime, MY_FLOAT *ht, int *order, MY_JET *jetInOut,int tag);

int       taylor_uniform_step_auto(MY_FLOAT *ti, MY_FLOAT *x, int dir, int step_ctl,
                         double log10abserr, double log10relerr,
                         MY_FLOAT *endtime, MY_FLOAT *ht, int *order, MY_JET *jetInOut);

int       taylor_step_auto_Twelve(MY_FLOAT *ti, MY_FLOAT *x, int dir, int step_ctl,
                         double log10abserr, double log10relerr,
                         MY_FLOAT *endtime, MY_FLOAT *ht, int *order, MY_JET *jetInOut, MY_FLOAT ***s_return, MY_JET ***jet_return);

/************************************************************************/

#ifdef __cplusplus
}
#endif
